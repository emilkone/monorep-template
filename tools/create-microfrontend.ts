#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run create-microfrontend <name> [description] [author]
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 * npm run create-microfrontend my-page "–ú–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
 * npm run create-microfrontend product-catalog "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
 */

import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import prompts from 'prompts';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface MicrofrontendConfig {
  name: string;
  description: string;
  author: string;
  componentName: string;
  componentFileName: string;
  microfrontendName: string;
  microfrontendCategory: string;
  platform: 'desktop' | 'mobile' | 'common';
}

function printUsage() {
  console.log('');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  npm run create-microfrontend <name> [description] [author]');
  console.log('');
  console.log('–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  npm run create-microfrontend my-page "–ú–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"');
  console.log('  npm run create-microfrontend product-catalog "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"');
}

async function parseArguments(): Promise<MicrofrontendConfig> {
  const args = process.argv.slice(2);

  if (args.length === 0) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
    printUsage();
    process.exit(1);
  }

  const name = args[0];
  const description = args[1] || `–ú–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ ${name}`;
  const author = args[2] || 'unknown';

  if (!name) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
    process.exit(1);
  }

  // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const platformResponse = await prompts({
    type: 'select',
    name: 'value',
    message: '–î–ª—è –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞—ë—Ç—Å—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥?',
    choices: [
      { title: 'Desktop', value: 'desktop' },
      { title: 'Mobile', value: 'mobile' },
      { title: '–û–±—â–∞—è (–¥–ª—è –æ–±–µ–∏—Ö)', value: 'common' },
    ],
    initial: 0,
  });

  if (!platformResponse.value) {
    console.error('‚ùå –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω—ë–Ω');
    process.exit(1);
  }

  const platform = platformResponse.value;

  const prefix = platform === 'common' ? 'independent' : platform;

  const nameWithPrefix = `${prefix}-${name}`;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const componentName = `${nameWithPrefix
    .split('-')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join('')}`;

  const componentFileName = nameWithPrefix;
  const microfrontendName = nameWithPrefix;
  const microfrontendCategory = 'pages';

  return {
    name: nameWithPrefix,
    description,
    author,
    componentName,
    componentFileName,
    microfrontendName,
    microfrontendCategory,
    platform,
  };
}

async function replaceTemplateVariables(
  content: string,
  config: MicrofrontendConfig
): Promise<string> {
  return content
    .replace(/\{\{MICROFRONTEND_NAME\}\}/g, config.microfrontendName)
    .replace(/\{\{MICROFRONTEND_DESCRIPTION\}\}/g, config.description)
    .replace(/\{\{AUTHOR_NAME\}\}/g, config.author)
    .replace(/\{\{COMPONENT_NAME\}\}/g, config.componentName)
    .replace(/\{\{COMPONENT_FILE_NAME\}\}/g, config.componentFileName)
    .replace(/\{\{MICROFRONTEND_CATEGORY\}\}/g, config.microfrontendCategory);
}

async function copyTemplateFile(
  templatePath: string,
  targetPath: string,
  config: MicrofrontendConfig
): Promise<void> {
  try {
    const content = await fs.readFile(templatePath, 'utf-8');
    const processedContent = await replaceTemplateVariables(content, config);

    await fs.mkdir(path.dirname(targetPath), { recursive: true });
    await fs.writeFile(targetPath, processedContent, 'utf-8');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${templatePath}`);
    throw error;
  }
}

async function createMicrofrontend(config: MicrofrontendConfig): Promise<void> {
  const templateDir = path.join(__dirname, '..', 'src', 'microfrontends', '_template');
  const targetDir = path.join(__dirname, '..', 'src', 'microfrontends', config.name);

  console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: ${config.name}`);
  console.log(`üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${targetDir}`);
  console.log(`üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${config.platform}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  try {
    await fs.access(targetDir);
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ú–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –∏–º–µ–Ω–µ–º "${config.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    process.exit(1);
  } catch {
    // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
  const filesToCopy = [
    { template: '_package.json', target: 'package.json' },
    { template: 'src/index.template', target: 'src/index.ts' },
    { template: 'src/types.template', target: 'src/types.ts' },
    { template: 'src/styles.module.css', target: 'src/styles.module.css' },
    {
      template: 'src/__stories__/index.stories.tsx.template',
      target: 'src/__stories__/index.stories.tsx',
    },
  ];

  for (const file of filesToCopy) {
    const templatePath = path.join(templateDir, file.template);
    const targetPath = path.join(targetDir, file.target);

    await copyTemplateFile(templatePath, targetPath, config);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${file.target}`);
  }

  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  const componentTemplatePath = path.join(
    templateDir,
    'src',
    '{{COMPONENT_FILE_NAME}}.tsx.template'
  );
  const componentTargetPath = path.join(targetDir, 'src', `${config.componentFileName}.tsx`);

  await copyTemplateFile(componentTemplatePath, componentTargetPath, config);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${config.componentFileName}.tsx`);

  console.log('');
  console.log('üéâ –ú–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  console.log('');
  console.log('–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log(`1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: cd src/microfrontends/${config.name}`);
  console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: yarn install');
  console.log('3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
  console.log('4. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏');
  console.log('5. –í –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Storybook: yarn storybook');
}

async function main(): Promise<void> {
  try {
    const config = await parseArguments();
    await createMicrofrontend(config);
  } catch (error) {
    if (error instanceof Error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', error.message);
    } else {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
    process.exit(1);
  }
}

main();
