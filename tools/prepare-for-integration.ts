#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run prepare-integration <microfrontend-name>
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 * npm run prepare-integration my-page
 * npm run prepare-integration product-catalog
 */

import { promises as fs } from 'fs';
import path from 'path';

interface IntegrationConfig {
  microfrontendName: string;
  sourceDir: string;
  outputDir: string;
}

function parseArguments(): IntegrationConfig {
  const args = process.argv.slice(2);

  if (args.length === 0) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  npm run prepare-integration <microfrontend-name>');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  npm run prepare-integration my-page');
    console.log('  npm run prepare-integration product-catalog');
    process.exit(1);
  }

  const microfrontendName = args[0]!;
  const sourceDir = path.join(__dirname, '..', 'src', 'microfrontends', microfrontendName);
  const outputDir = path.join(__dirname, '..', 'integration-ready', microfrontendName);

  return {
    microfrontendName,
    sourceDir,
    outputDir,
  };
}

async function checkMicrofrontendExists(sourceDir: string): Promise<void> {
  try {
    await fs.access(sourceDir);
  } catch {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ú–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ "${path.basename(sourceDir)}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    console.log(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${sourceDir}`);
    process.exit(1);
  }
}

async function readPackageJson(sourceDir: string): Promise<any> {
  const packageJsonPath = path.join(sourceDir, 'package.json');
  const content = await fs.readFile(packageJsonPath, 'utf-8');
  return JSON.parse(content);
}

async function updatePackageJsonForIntegration(
  packageJson: any,
  microfrontendName: string
): Promise<any> {
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
  const updatedPackageJson = {
    ...packageJson,
    name: `@growth-blocks/${microfrontendName}`,
    version: '0.0.0-stub',
    description: packageJson.description || `–ú–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ ${microfrontendName}`,
    repository: {
      type: 'git',
      url: 'https://gitlab.tcsbank.ru/ded-pwa-forms/growth-blocks',
    },
    boxyConfig: {
      schema: {
        version: '1.0',
      },
    },
    author: packageJson.author || 'unknown',
    released: true,
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¢-–ë–∞–Ω–∫–∞ –∫–∞–∫ peerDependencies
  updatedPackageJson.peerDependencies = {
    ...updatedPackageJson.peerDependencies,
    '@growth-blocks/mocks': '^0.0.0-stub',
    classnames: '^0.0.0-stub',
  };

  // –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
  delete updatedPackageJson.dependencies;

  return updatedPackageJson;
}

async function copyDirectory(source: string, destination: string): Promise<void> {
  await fs.mkdir(destination, { recursive: true });

  const entries = await fs.readdir(source, { withFileTypes: true });

  for (const entry of entries) {
    const sourcePath = path.join(source, entry.name);
    const destPath = path.join(destination, entry.name);

    if (entry.isDirectory()) {
      await copyDirectory(sourcePath, destPath);
    } else {
      await fs.copyFile(sourcePath, destPath);
    }
  }
}

async function createIntegrationChecklist(
  microfrontendName: string,
  outputDir: string
): Promise<void> {
  const checklistContent = `# –ß–µ–∫–ª–∏—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ "${microfrontendName}"

## –ü–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç:

### 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
- [ ] –ò–º—è –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ \`@growth-blocks/${microfrontendName}\`
- [ ] –í–µ—Ä—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ \`0.0.0-stub\`
- [ ] –î–æ–±–∞–≤–ª–µ–Ω \`boxyConfig\`
- [ ] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω \`released: true\`
- [ ] –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ \`peerDependencies\`

### 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- [ ] –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ \`dependencies\` (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
- [ ] –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ \`peerDependencies\`
- [ ] –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–æ–¥–µ (–Ω–µ—Ç –ø—Ä—è–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)

### 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
- [ ] TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
- [ ] –í—Å–µ —Ç–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
- [ ] CSS –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- [ ] Storybook –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã

### 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
- [ ] –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ \`src/microfrontends/${microfrontendName}/\`
- [ ] –î–æ–±–∞–≤–∏—Ç—å –≤ \`package.json\` –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ \`workspaces\`
- [ ] –ó–∞–ø—É—Å—Ç–∏—Ç—å \`yarn install\` –≤ –∫–æ—Ä–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ Storybook –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
- [ ] –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

### 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
- [ ] –ú–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ Storybook
- [ ] –í—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- [ ] TypeScript —Ç–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
- [ ] –°—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- [ ] –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏

## –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

\`\`\`bash
# –í –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
cd src/microfrontends/${microfrontendName}
yarn install

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
yarn check:types

# –ó–∞–ø—É—Å–∫ Storybook
yarn storybook
\`\`\`

## –ö–æ–Ω—Ç–∞–∫—Ç—ã:
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
`;

  const checklistPath = path.join(outputDir, 'INTEGRATION_CHECKLIST.md');
  await fs.writeFile(checklistPath, checklistContent, 'utf-8');
}

async function prepareForIntegration(config: IntegrationConfig): Promise<void> {
  console.log(`üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ "${config.microfrontendName}" –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏`);
  console.log(`üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${config.sourceDir}`);
  console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${config.outputDir}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  await checkMicrofrontendExists(config.sourceDir);

  // –ß–∏—Ç–∞–µ–º package.json
  const packageJson = await readPackageJson(config.sourceDir);
  console.log('‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω package.json');

  // –û–±–Ω–æ–≤–ª—è–µ–º package.json –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const updatedPackageJson = await updatePackageJsonForIntegration(
    packageJson,
    config.microfrontendName
  );
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω package.json –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');

  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
  await copyDirectory(config.sourceDir, config.outputDir);
  console.log('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã –º–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
  const packageJsonPath = path.join(config.outputDir, 'package.json');
  await fs.writeFile(packageJsonPath, JSON.stringify(updatedPackageJson, null, 2), 'utf-8');
  console.log('‚úÖ –ó–∞–ø–∏—Å–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json');

  // –°–æ–∑–¥–∞–µ–º —á–µ–∫–ª–∏—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  await createIntegrationChecklist(config.microfrontendName, config.outputDir);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫–ª–∏—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');

  console.log('');
  console.log('üéâ –ú–∏–∫—Ä–æ—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!');
  console.log('');
  console.log('–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${config.outputDir}`);
  console.log('2. –ò–∑—É—á–∏—Ç–µ —á–µ–∫–ª–∏—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: INTEGRATION_CHECKLIST.md');
  console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç');
  console.log('4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞');
}

async function main(): Promise<void> {
  try {
    const config = parseArguments();
    await prepareForIntegration(config);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

main();
